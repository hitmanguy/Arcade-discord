import { create } from "@bufbuild/protobuf";
import { FfiClient } from "./ffi_client.js";
import { FfiHandle } from "./napi/native.js";
import { SetSubscribedRequestSchema } from "./proto/room_pb.js";
class TrackPublication {
  constructor(ownedInfo) {
    this.info = ownedInfo.info;
    this.ffiHandle = new FfiHandle(ownedInfo.handle.id);
  }
  get sid() {
    return this.info.sid;
  }
  get name() {
    return this.info.name;
  }
  get kind() {
    return this.info.kind;
  }
  get source() {
    return this.info.source;
  }
  get simulcasted() {
    return this.info.simulcasted;
  }
  get width() {
    return this.info.width;
  }
  get height() {
    return this.info.height;
  }
  get mimeType() {
    return this.info.mimeType;
  }
  get muted() {
    return this.info.muted;
  }
  get encryptionType() {
    return this.info.encryptionType;
  }
}
class LocalTrackPublication extends TrackPublication {
  constructor(ownedInfo) {
    super(ownedInfo);
    this.firstSubscriptionResolver = null;
    this.firstSubscription = new Promise((resolve) => {
      this.firstSubscriptionResolver = resolve;
    });
  }
  async waitForSubscription() {
    await this.firstSubscription;
  }
  /** @internal */
  resolveFirstSubscription() {
    if (this.firstSubscriptionResolver) {
      this.firstSubscriptionResolver();
      this.firstSubscriptionResolver = null;
    }
  }
}
class RemoteTrackPublication extends TrackPublication {
  constructor(ownedInfo) {
    super(ownedInfo);
    this.subscribed = false;
  }
  setSubscribed(subscribed) {
    const req = create(SetSubscribedRequestSchema, {
      subscribe: subscribed,
      publicationHandle: this.ffiHandle.handle
    });
    FfiClient.instance.request({
      message: { case: "setSubscribed", value: req }
    });
  }
}
export {
  LocalTrackPublication,
  RemoteTrackPublication,
  TrackPublication
};
//# sourceMappingURL=track_publication.js.map