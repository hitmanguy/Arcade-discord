import { MessageInitShape } from '@bufbuild/protobuf';
import { IceServer as IceServer$1, TrackPublishOptions as TrackPublishOptions$1, VideoEncoding, AudioEncoding, TrackPublishOptionsSchema, IceServerSchema } from './proto/room_pb.cjs';
export { ConnectionQuality, ConnectionState, ContinualGatheringPolicy, DataPacketKind, IceTransportType } from './proto/room_pb.cjs';
import { TrackSource } from './proto/track_pb.cjs';
export { StreamState, TrackKind } from './proto/track_pb.cjs';
import { VideoCodec } from './proto/video_frame_pb.cjs';
export { VideoBufferType, VideoRotation } from './proto/video_frame_pb.cjs';
export { ConnectError, Room, RoomEvent, RoomOptions, RtcConfiguration } from './room.cjs';
export { LocalParticipant, Participant, RemoteParticipant } from './participant.cjs';
export { AudioTrack, LocalAudioTrack, LocalTrack, LocalVideoTrack, RemoteAudioTrack, RemoteTrack, RemoteVideoTrack, Track, VideoTrack } from './track.cjs';
export { VideoFrame } from './video_frame.cjs';
export { AudioFrame, combineAudioFrames } from './audio_frame.cjs';
export { AudioStream } from './audio_stream.cjs';
export { AudioResampler, AudioResamplerQuality } from './audio_resampler.cjs';
export { VideoFrameEvent, VideoStream } from './video_stream.cjs';
export { AudioSource } from './audio_source.cjs';
export { VideoSource } from './video_source.cjs';
export { LocalTrackPublication, RemoteTrackPublication, TrackPublication } from './track_publication.cjs';
export { Transcription, TranscriptionSegment } from './transcription.cjs';
export { E2EEManager, E2EEOptions, FrameCryptor, KeyProvider, KeyProviderOptions } from './e2ee.cjs';
export { PerformRpcParams, RpcError, RpcInvocationData } from './rpc.cjs';
export { EncryptionState, EncryptionType } from './proto/e2ee_pb.cjs';
export { ParticipantKind } from './proto/participant_pb.cjs';
export { livekitDispose as dispose } from './napi/native.d.cjs';
export { ChatMessage } from './types.cjs';
import '@bufbuild/protobuf/codegenv1';
import './proto/handle_pb.cjs';
import './proto/stats_pb.cjs';
import '@livekit/typed-emitter';
import './proto/audio_frame_pb.cjs';
import '@livekit/mutex';
import './proto/rpc_pb.cjs';

type IceServerInit = MessageInitShape<typeof IceServerSchema> & {
    urls: string[];
};
declare class IceServer implements IceServer$1 {
    $typeName: "livekit.proto.IceServer";
    urls: string[];
    username: string;
    password: string;
    constructor(init: IceServerInit);
}
declare class TrackPublishOptions implements TrackPublishOptions$1 {
    $typeName: "livekit.proto.TrackPublishOptions";
    videoCodec: VideoCodec;
    videoEncoding?: VideoEncoding | undefined;
    audioEncoding?: AudioEncoding | undefined;
    dtx: boolean;
    simulcast: boolean;
    source: TrackSource;
    stream: string;
    red: boolean;
    constructor(init?: MessageInitShape<typeof TrackPublishOptionsSchema>);
}

export { IceServer, TrackPublishOptions, TrackSource, VideoCodec };
