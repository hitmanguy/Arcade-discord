import { create } from "@bufbuild/protobuf";
import EventEmitter from "events";
import { E2EEManager } from "./e2ee.js";
import { FfiClient, FfiClientEvent, FfiHandle } from "./ffi_client.js";
import { LocalParticipant, RemoteParticipant } from "./participant.js";
import { EncryptionState } from "./proto/e2ee_pb.js";
import {
  ConnectRequestSchema,
  ConnectionState,
  ContinualGatheringPolicy,
  IceTransportType
} from "./proto/room_pb.js";
import { TrackKind } from "./proto/track_pb.js";
import { RemoteAudioTrack, RemoteVideoTrack } from "./track.js";
import { RemoteTrackPublication } from "./track_publication.js";
const defaultRtcConfiguration = {
  iceTransportType: IceTransportType.TRANSPORT_ALL,
  continualGatheringPolicy: ContinualGatheringPolicy.GATHER_CONTINUALLY,
  iceServers: []
};
const defaultRoomOptions = {
  autoSubscribe: true,
  dynacast: false,
  e2ee: void 0,
  rtcConfig: void 0,
  adaptiveStream: false,
  joinRetries: 1
};
class Room extends EventEmitter {
  constructor() {
    super();
    this.connectionState = ConnectionState.CONN_DISCONNECTED;
    this.remoteParticipants = /* @__PURE__ */ new Map();
    this.onFfiEvent = (ffiEvent) => {
      if (!this.localParticipant || !this.ffiHandle || !this.info) {
        throw TypeError("cannot handle ffi events before connectCallback");
      }
      if (ffiEvent.message.case == "rpcMethodInvocation") {
        if (ffiEvent.message.value.localParticipantHandle == this.localParticipant.ffi_handle.handle) {
          this.localParticipant.handleRpcMethodInvocation(
            ffiEvent.message.value.invocationId,
            ffiEvent.message.value.method,
            ffiEvent.message.value.requestId,
            ffiEvent.message.value.callerIdentity,
            ffiEvent.message.value.payload,
            ffiEvent.message.value.responseTimeoutMs
          );
        }
        return;
      } else if (ffiEvent.message.case != "roomEvent" || ffiEvent.message.value.roomHandle != this.ffiHandle.handle) {
        return;
      }
      const ev = ffiEvent.message.value.message;
      if (ev.case == "participantConnected") {
        const participant = this.createRemoteParticipant(ev.value.info);
        this.remoteParticipants.set(participant.identity, participant);
        this.emit("participantConnected" /* ParticipantConnected */, participant);
      } else if (ev.case == "participantDisconnected") {
        const participant = this.remoteParticipants.get(ev.value.participantIdentity);
        if (participant) {
          this.remoteParticipants.delete(participant.identity);
          this.emit("participantDisconnected" /* ParticipantDisconnected */, participant);
        }
      } else if (ev.case == "localTrackPublished") {
        const publication = this.localParticipant.trackPublications.get(ev.value.trackSid);
        if (!publication) {
          throw new TypeError("local track publication not found");
        }
        this.emit("localTrackPublished" /* LocalTrackPublished */, publication, this.localParticipant);
      } else if (ev.case == "localTrackUnpublished") {
        const publication = this.localParticipant.trackPublications.get(ev.value.publicationSid);
        this.localParticipant.trackPublications.delete(ev.value.publicationSid);
        if (publication) {
          this.emit("localTrackUnpublished" /* LocalTrackUnpublished */, publication, this.localParticipant);
        }
      } else if (ev.case == "localTrackSubscribed") {
        const publication = this.localParticipant.trackPublications.get(ev.value.trackSid);
        if (!publication) {
          throw new TypeError("local track publication not found");
        }
        publication.resolveFirstSubscription();
        this.emit("localTrackSubscribed" /* LocalTrackSubscribed */, publication.track);
      } else if (ev.case == "trackPublished") {
        const participant = this.requireRemoteParticipant(ev.value.participantIdentity);
        const publication = new RemoteTrackPublication(ev.value.publication);
        participant.trackPublications.set(publication.sid, publication);
        this.emit("trackPublished" /* TrackPublished */, publication, participant);
      } else if (ev.case == "trackUnpublished") {
        const participant = this.requireRemoteParticipant(ev.value.participantIdentity);
        const publication = participant.trackPublications.get(ev.value.publicationSid);
        participant.trackPublications.delete(ev.value.publicationSid);
        if (publication) {
          this.emit("trackUnpublished" /* TrackUnpublished */, publication, participant);
        }
      } else if (ev.case == "trackSubscribed") {
        const ownedTrack = ev.value.track;
        const trackInfo = ownedTrack.info;
        const { participant, publication } = this.requirePublicationOfRemoteParticipant(
          ev.value.participantIdentity,
          trackInfo.sid
        );
        publication.subscribed = true;
        if (trackInfo.kind == TrackKind.KIND_VIDEO) {
          publication.track = new RemoteVideoTrack(ownedTrack);
        } else if (trackInfo.kind == TrackKind.KIND_AUDIO) {
          publication.track = new RemoteAudioTrack(ownedTrack);
        }
        this.emit("trackSubscribed" /* TrackSubscribed */, publication.track, publication, participant);
      } else if (ev.case == "trackUnsubscribed") {
        const { participant, publication } = this.requirePublicationOfRemoteParticipant(
          ev.value.participantIdentity,
          ev.value.trackSid
        );
        const track = publication.track;
        publication.track = void 0;
        publication.subscribed = false;
        this.emit("trackUnsubscribed" /* TrackUnsubscribed */, track, publication, participant);
      } else if (ev.case == "trackSubscriptionFailed") {
        const participant = this.requireRemoteParticipant(ev.value.participantIdentity);
        this.emit("trackSubscriptionFailed" /* TrackSubscriptionFailed */, ev.value.trackSid, participant, ev.value.error);
      } else if (ev.case == "trackMuted") {
        const { participant, publication } = this.requirePublicationOfParticipant(
          ev.value.participantIdentity,
          ev.value.trackSid
        );
        publication.info.muted = true;
        if (publication.track) {
          publication.track.info.muted = true;
        }
        this.emit("trackMuted" /* TrackMuted */, publication, participant);
      } else if (ev.case == "trackUnmuted") {
        const { participant, publication } = this.requirePublicationOfParticipant(
          ev.value.participantIdentity,
          ev.value.trackSid
        );
        publication.info.muted = false;
        if (publication.track) {
          publication.track.info.muted = false;
        }
        this.emit("trackUnmuted" /* TrackUnmuted */, publication, participant);
      } else if (ev.case == "activeSpeakersChanged") {
        const activeSpeakers = ev.value.participantIdentities.map(
          (identity) => this.requireParticipantByIdentity(identity)
        );
        this.emit("activeSpeakersChanged" /* ActiveSpeakersChanged */, activeSpeakers);
      } else if (ev.case == "roomMetadataChanged") {
        this.info.metadata = ev.value.metadata;
        this.emit("roomMetadataChanged" /* RoomMetadataChanged */, this.info.metadata);
      } else if (ev.case == "participantMetadataChanged") {
        const participant = this.requireParticipantByIdentity(ev.value.participantIdentity);
        participant.info.metadata = ev.value.metadata;
        this.emit("participantMetadataChanged" /* ParticipantMetadataChanged */, participant.metadata, participant);
      } else if (ev.case == "participantNameChanged") {
        const participant = this.requireParticipantByIdentity(ev.value.participantIdentity);
        participant.info.name = ev.value.name;
        this.emit("participantNameChanged" /* ParticipantNameChanged */, participant.name, participant);
      } else if (ev.case == "participantAttributesChanged") {
        const participant = this.requireParticipantByIdentity(ev.value.participantIdentity);
        participant.info.attributes = ev.value.attributes.reduce(
          (acc, value) => {
            acc[value.key] = value.value;
            return acc;
          },
          {}
        );
        if (Object.keys(ev.value.changedAttributes).length > 0) {
          const changedAttributes = ev.value.changedAttributes.reduce(
            (acc, value) => {
              acc[value.key] = value.value;
              return acc;
            },
            {}
          );
          this.emit("participantAttributesChanged" /* ParticipantAttributesChanged */, changedAttributes, participant);
        }
      } else if (ev.case == "connectionQualityChanged") {
        const participant = this.requireParticipantByIdentity(ev.value.participantIdentity);
        this.emit("connectionQualityChanged" /* ConnectionQualityChanged */, ev.value.quality, participant);
      } else if (ev.case == "chatMessage") {
        const participant = this.retrieveParticipantByIdentity(ev.value.participantIdentity);
        const { id, message: messageText, timestamp, editTimestamp, generated } = ev.value.message;
        const message = {
          id,
          message: messageText,
          timestamp: Number(timestamp),
          editTimestamp: Number(editTimestamp),
          generated
        };
        this.emit("chatMessage" /* ChatMessage */, message, participant);
      } else if (ev.case == "dataPacketReceived") {
        const participant = this.remoteParticipants.get(ev.value.participantIdentity);
        const dataPacket = ev.value.value;
        switch (dataPacket.case) {
          case "user":
            const data = dataPacket.value.data.data;
            const buffer = FfiClient.instance.copyBuffer(data.dataPtr, Number(data.dataLen));
            new FfiHandle(dataPacket.value.data.handle.id).dispose();
            this.emit(
              "dataReceived" /* DataReceived */,
              buffer,
              participant,
              ev.value.kind,
              dataPacket.value.topic
            );
            break;
          case "sipDtmf":
            const { code, digit } = dataPacket.value;
            this.emit("dtmfReceived" /* DtmfReceived */, code, digit, participant);
            break;
          default:
            break;
        }
      } else if (ev.case == "e2eeStateChanged") {
        if (ev.value.state == EncryptionState.INTERNAL_ERROR) {
          this.emit("encryptionError" /* EncryptionError */, new Error("internal server error"));
        }
      } else if (ev.case == "connectionStateChanged") {
        this.connectionState = ev.value.state;
        this.emit("connectionStateChanged" /* ConnectionStateChanged */, this.connectionState);
      } else if (ev.case == "disconnected") {
        this.emit("disconnected" /* Disconnected */, ev.value.reason);
      } else if (ev.case == "reconnecting") {
        this.emit("reconnecting" /* Reconnecting */);
      } else if (ev.case == "reconnected") {
        this.emit("reconnected" /* Reconnected */);
      } else if (ev.case == "roomSidChanged") {
        this.emit("roomSidChanged" /* RoomSidChanged */, ev.value.sid);
      }
    };
  }
  get name() {
    var _a;
    return (_a = this.info) == null ? void 0 : _a.name;
  }
  get metadata() {
    var _a;
    return (_a = this.info) == null ? void 0 : _a.metadata;
  }
  get isConnected() {
    return this.ffiHandle != void 0 && this.connectionState != ConnectionState.CONN_DISCONNECTED;
  }
  async getSid() {
    if (!this.isConnected) {
      return "";
    }
    if (this.info && this.info.sid !== "") {
      return this.info.sid;
    }
    return new Promise((resolve, reject) => {
      const handleRoomUpdate = (sid) => {
        if (sid !== "") {
          this.off("roomSidChanged" /* RoomSidChanged */, handleRoomUpdate);
          resolve(sid);
        }
      };
      this.on("roomSidChanged" /* RoomSidChanged */, handleRoomUpdate);
      this.once("disconnected" /* Disconnected */, () => {
        this.off("roomSidChanged" /* RoomSidChanged */, handleRoomUpdate);
        reject("Room disconnected before room server id was available");
      });
    });
  }
  async connect(url, token, opts) {
    const options = { ...defaultRoomOptions, ...opts };
    const req = create(ConnectRequestSchema, {
      url,
      token,
      options
    });
    const res = FfiClient.instance.request({
      message: {
        case: "connect",
        value: req
      }
    });
    const cb = await FfiClient.instance.waitFor((ev) => {
      return ev.message.case == "connect" && ev.message.value.asyncId == res.asyncId;
    });
    if (cb.message.case !== "result") {
      throw new ConnectError(cb.message.value ?? "Unknown error");
    }
    const { room, localParticipant, participants } = cb.message.value;
    this.ffiHandle = new FfiHandle(room.handle.id);
    if (options.e2ee) {
      this.e2eeManager = new E2EEManager(this.ffiHandle.handle, options.e2ee);
    }
    this.info = room.info;
    this.connectionState = ConnectionState.CONN_CONNECTED;
    this.localParticipant = new LocalParticipant(localParticipant);
    for (const pt of participants) {
      const rp = this.createRemoteParticipant(pt.participant);
      for (const pub of pt.publications) {
        const publication = new RemoteTrackPublication(pub);
        rp.trackPublications.set(publication.sid, publication);
      }
    }
    FfiClient.instance.on(FfiClientEvent.FfiEvent, this.onFfiEvent);
  }
  async disconnect() {
    if (!this.isConnected || !this.ffiHandle) {
      return;
    }
    FfiClient.instance.request({
      message: {
        case: "disconnect",
        value: {
          roomHandle: this.ffiHandle.handle
        }
      }
    });
    FfiClient.instance.removeListener(FfiClientEvent.FfiEvent, this.onFfiEvent);
    this.removeAllListeners();
  }
  retrieveParticipantByIdentity(identity) {
    var _a;
    if (((_a = this.localParticipant) == null ? void 0 : _a.identity) === identity) {
      return this.localParticipant;
    } else {
      return this.remoteParticipants.get(identity);
    }
  }
  requireParticipantByIdentity(identity) {
    var _a;
    if (((_a = this.localParticipant) == null ? void 0 : _a.identity) === identity) {
      return this.localParticipant;
    } else if (this.remoteParticipants.has(identity)) {
      return this.remoteParticipants.get(identity);
    } else {
      throw new TypeError(`participant ${identity} not found`);
    }
  }
  requireRemoteParticipant(identity) {
    const participant = this.remoteParticipants.get(identity);
    if (!participant) {
      throw new TypeError(`participant ${identity} not found`);
    }
    return participant;
  }
  requirePublicationOfParticipant(identity, trackSid) {
    const participant = this.requireParticipantByIdentity(identity);
    const publication = participant.trackPublications.get(trackSid);
    if (!publication) {
      throw new TypeError(`publication ${trackSid} not found`);
    }
    return { participant, publication };
  }
  requirePublicationOfRemoteParticipant(identity, trackSid) {
    const participant = this.requireRemoteParticipant(identity);
    const publication = participant.trackPublications.get(trackSid);
    if (!publication) {
      throw new TypeError(`publication ${trackSid} not found`);
    }
    return { participant, publication };
  }
  createRemoteParticipant(ownedInfo) {
    if (this.remoteParticipants.has(ownedInfo.info.identity)) {
      throw new Error("Participant already exists");
    }
    const participant = new RemoteParticipant(ownedInfo);
    this.remoteParticipants.set(ownedInfo.info.identity, participant);
    return participant;
  }
}
class ConnectError extends Error {
  constructor(message) {
    super(message);
  }
}
var RoomEvent = /* @__PURE__ */ ((RoomEvent2) => {
  RoomEvent2["ParticipantConnected"] = "participantConnected";
  RoomEvent2["ParticipantDisconnected"] = "participantDisconnected";
  RoomEvent2["LocalTrackPublished"] = "localTrackPublished";
  RoomEvent2["LocalTrackUnpublished"] = "localTrackUnpublished";
  RoomEvent2["LocalTrackSubscribed"] = "localTrackSubscribed";
  RoomEvent2["TrackPublished"] = "trackPublished";
  RoomEvent2["TrackUnpublished"] = "trackUnpublished";
  RoomEvent2["TrackSubscribed"] = "trackSubscribed";
  RoomEvent2["TrackUnsubscribed"] = "trackUnsubscribed";
  RoomEvent2["TrackSubscriptionFailed"] = "trackSubscriptionFailed";
  RoomEvent2["TrackMuted"] = "trackMuted";
  RoomEvent2["TrackUnmuted"] = "trackUnmuted";
  RoomEvent2["ActiveSpeakersChanged"] = "activeSpeakersChanged";
  RoomEvent2["RoomMetadataChanged"] = "roomMetadataChanged";
  RoomEvent2["RoomSidChanged"] = "roomSidChanged";
  RoomEvent2["ParticipantMetadataChanged"] = "participantMetadataChanged";
  RoomEvent2["ParticipantNameChanged"] = "participantNameChanged";
  RoomEvent2["ParticipantAttributesChanged"] = "participantAttributesChanged";
  RoomEvent2["ConnectionQualityChanged"] = "connectionQualityChanged";
  RoomEvent2["DataReceived"] = "dataReceived";
  RoomEvent2["ChatMessage"] = "chatMessage";
  RoomEvent2["DtmfReceived"] = "dtmfReceived";
  RoomEvent2["EncryptionError"] = "encryptionError";
  RoomEvent2["ConnectionStateChanged"] = "connectionStateChanged";
  RoomEvent2["Connected"] = "connected";
  RoomEvent2["Disconnected"] = "disconnected";
  RoomEvent2["Reconnecting"] = "reconnecting";
  RoomEvent2["Reconnected"] = "reconnected";
  return RoomEvent2;
})(RoomEvent || {});
export {
  ConnectError,
  Room,
  RoomEvent,
  defaultRoomOptions,
  defaultRtcConfiguration
};
//# sourceMappingURL=room.js.map