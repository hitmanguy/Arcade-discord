import { create } from "@bufbuild/protobuf";
import { FfiClient, FfiHandle } from "./ffi_client.js";
import {
  CaptureVideoFrameRequestSchema,
  NewVideoSourceRequestSchema,
  VideoRotation,
  VideoSourceType
} from "./proto/video_frame_pb.js";
class VideoSource {
  constructor(width, height) {
    this.width = width;
    this.height = height;
    const req = create(NewVideoSourceRequestSchema, {
      type: VideoSourceType.VIDEO_SOURCE_NATIVE,
      resolution: {
        width,
        height
      }
    });
    const res = FfiClient.instance.request({
      message: {
        case: "newVideoSource",
        value: req
      }
    });
    this.info = res.source.info;
    this.ffiHandle = new FfiHandle(res.source.handle.id);
  }
  captureFrame(frame, timestampUs = BigInt(0), rotation = VideoRotation.VIDEO_ROTATION_0) {
    const req = create(CaptureVideoFrameRequestSchema, {
      sourceHandle: this.ffiHandle.handle,
      buffer: frame.protoInfo(),
      rotation,
      timestampUs
    });
    FfiClient.instance.request({
      message: { case: "captureVideoFrame", value: req }
    });
  }
}
export {
  VideoSource
};
//# sourceMappingURL=video_source.js.map