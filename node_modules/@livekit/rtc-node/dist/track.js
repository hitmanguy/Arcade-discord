import { create } from "@bufbuild/protobuf";
import { FfiClient, FfiHandle } from "./ffi_client.js";
import { CreateAudioTrackRequestSchema, CreateVideoTrackRequestSchema } from "./proto/track_pb.js";
class Track {
  constructor(owned) {
    this.info = owned.info;
    this.ffi_handle = new FfiHandle(owned.handle.id);
  }
  get sid() {
    return this.info.sid;
  }
  get name() {
    return this.info.name;
  }
  get kind() {
    return this.info.kind;
  }
  get stream_state() {
    return this.info.streamState;
  }
  get muted() {
    return this.info.muted;
  }
}
class LocalAudioTrack extends Track {
  constructor(owned) {
    super(owned);
  }
  static createAudioTrack(name, source) {
    const req = create(CreateAudioTrackRequestSchema, {
      name,
      sourceHandle: source.ffiHandle.handle
    });
    const res = FfiClient.instance.request({
      message: { case: "createAudioTrack", value: req }
    });
    return new LocalAudioTrack(res.track);
  }
}
class LocalVideoTrack extends Track {
  constructor(owned) {
    super(owned);
  }
  static createVideoTrack(name, source) {
    const req = create(CreateVideoTrackRequestSchema, {
      name,
      sourceHandle: source.ffiHandle.handle
    });
    const res = FfiClient.instance.request({
      message: { case: "createVideoTrack", value: req }
    });
    return new LocalVideoTrack(res.track);
  }
}
class RemoteVideoTrack extends Track {
  constructor(owned) {
    super(owned);
  }
}
class RemoteAudioTrack extends Track {
  constructor(owned) {
    super(owned);
  }
}
export {
  LocalAudioTrack,
  LocalVideoTrack,
  RemoteAudioTrack,
  RemoteVideoTrack,
  Track
};
//# sourceMappingURL=track.js.map