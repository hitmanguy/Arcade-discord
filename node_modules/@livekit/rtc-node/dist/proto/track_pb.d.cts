import { GenFile, GenMessage, GenEnum } from '@bufbuild/protobuf/codegenv1';
import { EncryptionType } from './e2ee_pb.cjs';
import { FfiOwnedHandle } from './handle_pb.cjs';
import { RtcStats } from './stats_pb.cjs';
import { Message } from '@bufbuild/protobuf';

/**
 * Describes the file track.proto.
 */
declare const file_track: GenFile;
/**
 * Create a new VideoTrack from a VideoSource
 *
 * @generated from message livekit.proto.CreateVideoTrackRequest
 */
type CreateVideoTrackRequest = Message<"livekit.proto.CreateVideoTrackRequest"> & {
    /**
     * @generated from field: required string name = 1;
     */
    name: string;
    /**
     * @generated from field: required uint64 source_handle = 2;
     */
    sourceHandle: bigint;
};
/**
 * Describes the message livekit.proto.CreateVideoTrackRequest.
 * Use `create(CreateVideoTrackRequestSchema)` to create a new message.
 */
declare const CreateVideoTrackRequestSchema: GenMessage<CreateVideoTrackRequest>;
/**
 * @generated from message livekit.proto.CreateVideoTrackResponse
 */
type CreateVideoTrackResponse = Message<"livekit.proto.CreateVideoTrackResponse"> & {
    /**
     * @generated from field: required livekit.proto.OwnedTrack track = 1;
     */
    track?: OwnedTrack;
};
/**
 * Describes the message livekit.proto.CreateVideoTrackResponse.
 * Use `create(CreateVideoTrackResponseSchema)` to create a new message.
 */
declare const CreateVideoTrackResponseSchema: GenMessage<CreateVideoTrackResponse>;
/**
 * Create a new AudioTrack from a AudioSource
 *
 * @generated from message livekit.proto.CreateAudioTrackRequest
 */
type CreateAudioTrackRequest = Message<"livekit.proto.CreateAudioTrackRequest"> & {
    /**
     * @generated from field: required string name = 1;
     */
    name: string;
    /**
     * @generated from field: required uint64 source_handle = 2;
     */
    sourceHandle: bigint;
};
/**
 * Describes the message livekit.proto.CreateAudioTrackRequest.
 * Use `create(CreateAudioTrackRequestSchema)` to create a new message.
 */
declare const CreateAudioTrackRequestSchema: GenMessage<CreateAudioTrackRequest>;
/**
 * @generated from message livekit.proto.CreateAudioTrackResponse
 */
type CreateAudioTrackResponse = Message<"livekit.proto.CreateAudioTrackResponse"> & {
    /**
     * @generated from field: required livekit.proto.OwnedTrack track = 1;
     */
    track?: OwnedTrack;
};
/**
 * Describes the message livekit.proto.CreateAudioTrackResponse.
 * Use `create(CreateAudioTrackResponseSchema)` to create a new message.
 */
declare const CreateAudioTrackResponseSchema: GenMessage<CreateAudioTrackResponse>;
/**
 * @generated from message livekit.proto.GetStatsRequest
 */
type GetStatsRequest = Message<"livekit.proto.GetStatsRequest"> & {
    /**
     * @generated from field: required uint64 track_handle = 1;
     */
    trackHandle: bigint;
};
/**
 * Describes the message livekit.proto.GetStatsRequest.
 * Use `create(GetStatsRequestSchema)` to create a new message.
 */
declare const GetStatsRequestSchema: GenMessage<GetStatsRequest>;
/**
 * @generated from message livekit.proto.GetStatsResponse
 */
type GetStatsResponse = Message<"livekit.proto.GetStatsResponse"> & {
    /**
     * @generated from field: required uint64 async_id = 1;
     */
    asyncId: bigint;
};
/**
 * Describes the message livekit.proto.GetStatsResponse.
 * Use `create(GetStatsResponseSchema)` to create a new message.
 */
declare const GetStatsResponseSchema: GenMessage<GetStatsResponse>;
/**
 * @generated from message livekit.proto.GetStatsCallback
 */
type GetStatsCallback = Message<"livekit.proto.GetStatsCallback"> & {
    /**
     * @generated from field: required uint64 async_id = 1;
     */
    asyncId: bigint;
    /**
     * @generated from field: optional string error = 2;
     */
    error: string;
    /**
     * @generated from field: repeated livekit.proto.RtcStats stats = 3;
     */
    stats: RtcStats[];
};
/**
 * Describes the message livekit.proto.GetStatsCallback.
 * Use `create(GetStatsCallbackSchema)` to create a new message.
 */
declare const GetStatsCallbackSchema: GenMessage<GetStatsCallback>;
/**
 * @generated from message livekit.proto.TrackEvent
 */
type TrackEvent = Message<"livekit.proto.TrackEvent"> & {};
/**
 * Describes the message livekit.proto.TrackEvent.
 * Use `create(TrackEventSchema)` to create a new message.
 */
declare const TrackEventSchema: GenMessage<TrackEvent>;
/**
 * @generated from message livekit.proto.TrackPublicationInfo
 */
type TrackPublicationInfo = Message<"livekit.proto.TrackPublicationInfo"> & {
    /**
     * @generated from field: required string sid = 1;
     */
    sid: string;
    /**
     * @generated from field: required string name = 2;
     */
    name: string;
    /**
     * @generated from field: required livekit.proto.TrackKind kind = 3;
     */
    kind: TrackKind;
    /**
     * @generated from field: required livekit.proto.TrackSource source = 4;
     */
    source: TrackSource;
    /**
     * @generated from field: required bool simulcasted = 5;
     */
    simulcasted: boolean;
    /**
     * @generated from field: required uint32 width = 6;
     */
    width: number;
    /**
     * @generated from field: required uint32 height = 7;
     */
    height: number;
    /**
     * @generated from field: required string mime_type = 8;
     */
    mimeType: string;
    /**
     * @generated from field: required bool muted = 9;
     */
    muted: boolean;
    /**
     * @generated from field: required bool remote = 10;
     */
    remote: boolean;
    /**
     * @generated from field: required livekit.proto.EncryptionType encryption_type = 11;
     */
    encryptionType: EncryptionType;
};
/**
 * Describes the message livekit.proto.TrackPublicationInfo.
 * Use `create(TrackPublicationInfoSchema)` to create a new message.
 */
declare const TrackPublicationInfoSchema: GenMessage<TrackPublicationInfo>;
/**
 * @generated from message livekit.proto.OwnedTrackPublication
 */
type OwnedTrackPublication = Message<"livekit.proto.OwnedTrackPublication"> & {
    /**
     * @generated from field: required livekit.proto.FfiOwnedHandle handle = 1;
     */
    handle?: FfiOwnedHandle;
    /**
     * @generated from field: required livekit.proto.TrackPublicationInfo info = 2;
     */
    info?: TrackPublicationInfo;
};
/**
 * Describes the message livekit.proto.OwnedTrackPublication.
 * Use `create(OwnedTrackPublicationSchema)` to create a new message.
 */
declare const OwnedTrackPublicationSchema: GenMessage<OwnedTrackPublication>;
/**
 * @generated from message livekit.proto.TrackInfo
 */
type TrackInfo = Message<"livekit.proto.TrackInfo"> & {
    /**
     * @generated from field: required string sid = 1;
     */
    sid: string;
    /**
     * @generated from field: required string name = 2;
     */
    name: string;
    /**
     * @generated from field: required livekit.proto.TrackKind kind = 3;
     */
    kind: TrackKind;
    /**
     * @generated from field: required livekit.proto.StreamState stream_state = 4;
     */
    streamState: StreamState;
    /**
     * @generated from field: required bool muted = 5;
     */
    muted: boolean;
    /**
     * @generated from field: required bool remote = 6;
     */
    remote: boolean;
};
/**
 * Describes the message livekit.proto.TrackInfo.
 * Use `create(TrackInfoSchema)` to create a new message.
 */
declare const TrackInfoSchema: GenMessage<TrackInfo>;
/**
 * @generated from message livekit.proto.OwnedTrack
 */
type OwnedTrack = Message<"livekit.proto.OwnedTrack"> & {
    /**
     * @generated from field: required livekit.proto.FfiOwnedHandle handle = 1;
     */
    handle?: FfiOwnedHandle;
    /**
     * @generated from field: required livekit.proto.TrackInfo info = 2;
     */
    info?: TrackInfo;
};
/**
 * Describes the message livekit.proto.OwnedTrack.
 * Use `create(OwnedTrackSchema)` to create a new message.
 */
declare const OwnedTrackSchema: GenMessage<OwnedTrack>;
/**
 * Mute/UnMute a track
 *
 * @generated from message livekit.proto.LocalTrackMuteRequest
 */
type LocalTrackMuteRequest = Message<"livekit.proto.LocalTrackMuteRequest"> & {
    /**
     * @generated from field: required uint64 track_handle = 1;
     */
    trackHandle: bigint;
    /**
     * @generated from field: required bool mute = 2;
     */
    mute: boolean;
};
/**
 * Describes the message livekit.proto.LocalTrackMuteRequest.
 * Use `create(LocalTrackMuteRequestSchema)` to create a new message.
 */
declare const LocalTrackMuteRequestSchema: GenMessage<LocalTrackMuteRequest>;
/**
 * @generated from message livekit.proto.LocalTrackMuteResponse
 */
type LocalTrackMuteResponse = Message<"livekit.proto.LocalTrackMuteResponse"> & {
    /**
     * @generated from field: required bool muted = 1;
     */
    muted: boolean;
};
/**
 * Describes the message livekit.proto.LocalTrackMuteResponse.
 * Use `create(LocalTrackMuteResponseSchema)` to create a new message.
 */
declare const LocalTrackMuteResponseSchema: GenMessage<LocalTrackMuteResponse>;
/**
 * Enable/Disable a remote track
 *
 * @generated from message livekit.proto.EnableRemoteTrackRequest
 */
type EnableRemoteTrackRequest = Message<"livekit.proto.EnableRemoteTrackRequest"> & {
    /**
     * @generated from field: required uint64 track_handle = 1;
     */
    trackHandle: bigint;
    /**
     * @generated from field: required bool enabled = 2;
     */
    enabled: boolean;
};
/**
 * Describes the message livekit.proto.EnableRemoteTrackRequest.
 * Use `create(EnableRemoteTrackRequestSchema)` to create a new message.
 */
declare const EnableRemoteTrackRequestSchema: GenMessage<EnableRemoteTrackRequest>;
/**
 * @generated from message livekit.proto.EnableRemoteTrackResponse
 */
type EnableRemoteTrackResponse = Message<"livekit.proto.EnableRemoteTrackResponse"> & {
    /**
     * @generated from field: required bool enabled = 1;
     */
    enabled: boolean;
};
/**
 * Describes the message livekit.proto.EnableRemoteTrackResponse.
 * Use `create(EnableRemoteTrackResponseSchema)` to create a new message.
 */
declare const EnableRemoteTrackResponseSchema: GenMessage<EnableRemoteTrackResponse>;
/**
 * @generated from enum livekit.proto.TrackKind
 */
declare enum TrackKind {
    /**
     * @generated from enum value: KIND_UNKNOWN = 0;
     */
    KIND_UNKNOWN = 0,
    /**
     * @generated from enum value: KIND_AUDIO = 1;
     */
    KIND_AUDIO = 1,
    /**
     * @generated from enum value: KIND_VIDEO = 2;
     */
    KIND_VIDEO = 2
}
/**
 * Describes the enum livekit.proto.TrackKind.
 */
declare const TrackKindSchema: GenEnum<TrackKind>;
/**
 * @generated from enum livekit.proto.TrackSource
 */
declare enum TrackSource {
    /**
     * @generated from enum value: SOURCE_UNKNOWN = 0;
     */
    SOURCE_UNKNOWN = 0,
    /**
     * @generated from enum value: SOURCE_CAMERA = 1;
     */
    SOURCE_CAMERA = 1,
    /**
     * @generated from enum value: SOURCE_MICROPHONE = 2;
     */
    SOURCE_MICROPHONE = 2,
    /**
     * @generated from enum value: SOURCE_SCREENSHARE = 3;
     */
    SOURCE_SCREENSHARE = 3,
    /**
     * @generated from enum value: SOURCE_SCREENSHARE_AUDIO = 4;
     */
    SOURCE_SCREENSHARE_AUDIO = 4
}
/**
 * Describes the enum livekit.proto.TrackSource.
 */
declare const TrackSourceSchema: GenEnum<TrackSource>;
/**
 * @generated from enum livekit.proto.StreamState
 */
declare enum StreamState {
    /**
     * @generated from enum value: STATE_UNKNOWN = 0;
     */
    STATE_UNKNOWN = 0,
    /**
     * @generated from enum value: STATE_ACTIVE = 1;
     */
    STATE_ACTIVE = 1,
    /**
     * @generated from enum value: STATE_PAUSED = 2;
     */
    STATE_PAUSED = 2
}
/**
 * Describes the enum livekit.proto.StreamState.
 */
declare const StreamStateSchema: GenEnum<StreamState>;

export { type CreateAudioTrackRequest, CreateAudioTrackRequestSchema, type CreateAudioTrackResponse, CreateAudioTrackResponseSchema, type CreateVideoTrackRequest, CreateVideoTrackRequestSchema, type CreateVideoTrackResponse, CreateVideoTrackResponseSchema, type EnableRemoteTrackRequest, EnableRemoteTrackRequestSchema, type EnableRemoteTrackResponse, EnableRemoteTrackResponseSchema, type GetStatsCallback, GetStatsCallbackSchema, type GetStatsRequest, GetStatsRequestSchema, type GetStatsResponse, GetStatsResponseSchema, type LocalTrackMuteRequest, LocalTrackMuteRequestSchema, type LocalTrackMuteResponse, LocalTrackMuteResponseSchema, type OwnedTrack, type OwnedTrackPublication, OwnedTrackPublicationSchema, OwnedTrackSchema, StreamState, StreamStateSchema, type TrackEvent, TrackEventSchema, type TrackInfo, TrackInfoSchema, TrackKind, TrackKindSchema, type TrackPublicationInfo, TrackPublicationInfoSchema, TrackSource, TrackSourceSchema, file_track };
