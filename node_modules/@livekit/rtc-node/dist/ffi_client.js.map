{"version":3,"sources":["../src/ffi_client.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { MessageInitShape } from '@bufbuild/protobuf';\nimport { create, fromBinary, toBinary } from '@bufbuild/protobuf';\nimport type { TypedEventEmitter as TypedEmitter } from '@livekit/typed-emitter';\nimport EventEmitter from 'events';\nimport {\n  FfiHandle,\n  livekitCopyBuffer,\n  livekitDispose,\n  livekitFfiRequest,\n  livekitInitialize,\n  livekitRetrievePtr,\n} from './napi/native.js';\nimport {\n  type FfiEvent,\n  FfiEventSchema,\n  type FfiRequest,\n  FfiRequestSchema,\n  type FfiResponse,\n  FfiResponseSchema,\n} from './proto/ffi_pb.js';\nimport { SDK_VERSION } from './version.js';\n\nexport { FfiHandle, type FfiEvent, type FfiResponse, type FfiRequest, livekitDispose as dispose };\n\nexport type FfiClientCallbacks = {\n  ffi_event: (event: FfiEvent) => void;\n};\n\nexport enum FfiClientEvent {\n  FfiEvent = 'ffi_event',\n}\n\nexport class FfiClient extends (EventEmitter as new () => TypedEmitter<FfiClientCallbacks>) {\n  static _client?: FfiClient;\n\n  /** @internal */\n  static get instance(): FfiClient {\n    if (!FfiClient._client) FfiClient._client = new FfiClient();\n\n    return FfiClient._client;\n  }\n\n  constructor() {\n    super();\n    this.setMaxListeners(0);\n\n    livekitInitialize(\n      (event_data: Uint8Array) => {\n        const event = fromBinary(FfiEventSchema, event_data);\n        this.emit(FfiClientEvent.FfiEvent, event);\n      },\n      true,\n      SDK_VERSION,\n    );\n  }\n\n  request<T>(req: MessageInitShape<typeof FfiRequestSchema>): T {\n    const request = create(FfiRequestSchema, req);\n    const req_data = toBinary(FfiRequestSchema, request);\n    const res_data = livekitFfiRequest(req_data);\n    return fromBinary(FfiResponseSchema, res_data).message.value as T;\n  }\n\n  copyBuffer(ptr: bigint, len: number): Uint8Array {\n    return livekitCopyBuffer(ptr, len);\n  }\n\n  retrievePtr(data: Uint8Array): bigint {\n    return livekitRetrievePtr(data);\n  }\n\n  async waitFor<T>(predicate: (ev: FfiEvent) => boolean): Promise<T> {\n    return new Promise<T>((resolve) => {\n      const listener = (ev: FfiEvent) => {\n        if (predicate(ev)) {\n          this.off(FfiClientEvent.FfiEvent, listener);\n          resolve(ev.message.value as T);\n        }\n      };\n      this.on(FfiClientEvent.FfiEvent, listener);\n    });\n  }\n}\n"],"mappings":"AAIA,SAAS,QAAQ,YAAY,gBAAgB;AAE7C,OAAO,kBAAkB;AACzB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EAEE;AAAA,EAEA;AAAA,EAEA;AAAA,OACK;AACP,SAAS,mBAAmB;AAQrB,IAAK,iBAAL,kBAAKA,oBAAL;AACL,EAAAA,gBAAA,cAAW;AADD,SAAAA;AAAA,GAAA;AAIL,MAAM,kBAAmB,aAA4D;AAAA;AAAA,EAI1F,WAAW,WAAsB;AAC/B,QAAI,CAAC,UAAU,QAAS,WAAU,UAAU,IAAI,UAAU;AAE1D,WAAO,UAAU;AAAA,EACnB;AAAA,EAEA,cAAc;AACZ,UAAM;AACN,SAAK,gBAAgB,CAAC;AAEtB;AAAA,MACE,CAAC,eAA2B;AAC1B,cAAM,QAAQ,WAAW,gBAAgB,UAAU;AACnD,aAAK,KAAK,4BAAyB,KAAK;AAAA,MAC1C;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,QAAW,KAAmD;AAC5D,UAAM,UAAU,OAAO,kBAAkB,GAAG;AAC5C,UAAM,WAAW,SAAS,kBAAkB,OAAO;AACnD,UAAM,WAAW,kBAAkB,QAAQ;AAC3C,WAAO,WAAW,mBAAmB,QAAQ,EAAE,QAAQ;AAAA,EACzD;AAAA,EAEA,WAAW,KAAa,KAAyB;AAC/C,WAAO,kBAAkB,KAAK,GAAG;AAAA,EACnC;AAAA,EAEA,YAAY,MAA0B;AACpC,WAAO,mBAAmB,IAAI;AAAA,EAChC;AAAA,EAEA,MAAM,QAAW,WAAkD;AACjE,WAAO,IAAI,QAAW,CAAC,YAAY;AACjC,YAAM,WAAW,CAAC,OAAiB;AACjC,YAAI,UAAU,EAAE,GAAG;AACjB,eAAK,IAAI,4BAAyB,QAAQ;AAC1C,kBAAQ,GAAG,QAAQ,KAAU;AAAA,QAC/B;AAAA,MACF;AACA,WAAK,GAAG,4BAAyB,QAAQ;AAAA,IAC3C,CAAC;AAAA,EACH;AACF;","names":["FfiClientEvent"]}