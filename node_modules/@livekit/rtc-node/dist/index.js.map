{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { MessageInitShape } from '@bufbuild/protobuf';\nimport { create } from '@bufbuild/protobuf';\nimport type { AudioEncoding, TrackPublishOptionsSchema, VideoEncoding } from './proto/room_pb.js';\nimport {\n  AudioEncodingSchema,\n  IceServerSchema,\n  type IceServer as IceServerType,\n  type TrackPublishOptions as TrackPublishOptionsType,\n  VideoEncodingSchema,\n} from './proto/room_pb.js';\nimport { TrackSource } from './proto/track_pb.js';\nimport { VideoCodec } from './proto/video_frame_pb.js';\n\nexport { Room, RoomEvent, ConnectError, type RoomOptions, type RtcConfiguration } from './room.js';\nexport { Participant, RemoteParticipant, LocalParticipant } from './participant.js';\nexport {\n  Track,\n  type LocalTrack,\n  type RemoteTrack,\n  type VideoTrack,\n  LocalAudioTrack,\n  LocalVideoTrack,\n  RemoteAudioTrack,\n  RemoteVideoTrack,\n  type AudioTrack,\n} from './track.js';\nexport { VideoFrame } from './video_frame.js';\nexport { AudioFrame, combineAudioFrames } from './audio_frame.js';\nexport { AudioStream } from './audio_stream.js';\nexport { AudioResampler, AudioResamplerQuality } from './audio_resampler.js';\nexport { VideoStream, type VideoFrameEvent } from './video_stream.js';\nexport { AudioSource } from './audio_source.js';\nexport { VideoSource } from './video_source.js';\nexport {\n  TrackPublication,\n  RemoteTrackPublication,\n  LocalTrackPublication,\n} from './track_publication.js';\nexport { type Transcription, type TranscriptionSegment } from './transcription.js';\nexport {\n  E2EEManager,\n  type E2EEOptions,\n  type KeyProviderOptions,\n  KeyProvider,\n  FrameCryptor,\n} from './e2ee.js';\n\nexport {\n  ConnectionQuality,\n  IceTransportType,\n  DataPacketKind,\n  ContinualGatheringPolicy,\n  ConnectionState,\n} from './proto/room_pb.js';\nexport { RpcError, type RpcInvocationData, type PerformRpcParams } from './rpc.js';\nexport { EncryptionType, EncryptionState } from './proto/e2ee_pb.js';\nexport { StreamState, TrackKind, TrackSource } from './proto/track_pb.js';\nexport { VideoBufferType, VideoRotation, VideoCodec } from './proto/video_frame_pb.js';\nexport { ParticipantKind } from './proto/participant_pb.js';\nexport { dispose } from './ffi_client.js';\nexport type { ChatMessage } from './types.js';\n\n// exposing helpers for API compatibility with 1.x version of protobuf-es where these were class instances\n\ntype IceServerInit = MessageInitShape<typeof IceServerSchema> & {\n  urls: string[];\n};\nexport class IceServer implements IceServerType {\n  $typeName = 'livekit.proto.IceServer' as const;\n  urls: string[];\n  username: string;\n  password: string;\n  constructor(init: IceServerInit) {\n    const { urls, username, password } = init;\n    this.urls = urls;\n    this.username = username ?? '';\n    this.password = password ?? '';\n    create(IceServerSchema, init);\n  }\n}\n\nexport class TrackPublishOptions implements TrackPublishOptionsType {\n  $typeName = 'livekit.proto.TrackPublishOptions' as const;\n  videoCodec: VideoCodec;\n  videoEncoding?: VideoEncoding | undefined;\n  audioEncoding?: AudioEncoding | undefined;\n  dtx: boolean;\n  simulcast: boolean;\n  source: TrackSource;\n  stream: string;\n  red: boolean;\n\n  constructor(init: MessageInitShape<typeof TrackPublishOptionsSchema> = {}) {\n    const { videoCodec, videoEncoding, audioEncoding, dtx, simulcast, source, stream, red } = init;\n    this.videoCodec = videoCodec ?? VideoCodec.VP8;\n    if (videoEncoding) {\n      this.videoEncoding = create(VideoEncodingSchema, videoEncoding);\n    }\n    if (audioEncoding) {\n      this.audioEncoding = create(AudioEncodingSchema, audioEncoding);\n    }\n    this.dtx = dtx ?? false;\n    this.simulcast = simulcast ?? false;\n    this.source = source ?? TrackSource.SOURCE_UNKNOWN;\n    this.stream = stream ?? '';\n    this.red = red ?? false;\n  }\n}\n"],"mappings":"AAIA,SAAS,cAAc;AAEvB;AAAA,EACE;AAAA,EACA;AAAA,EAGA;AAAA,OACK;AACP,SAAS,mBAAmB;AAC5B,SAAS,kBAAkB;AAE3B,SAAS,MAAM,WAAW,oBAA6D;AACvF,SAAS,aAAa,mBAAmB,wBAAwB;AACjE;AAAA,EACE;AAAA,EAIA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OAEK;AACP,SAAS,kBAAkB;AAC3B,SAAS,YAAY,0BAA0B;AAC/C,SAAS,mBAAmB;AAC5B,SAAS,gBAAgB,6BAA6B;AACtD,SAAS,mBAAyC;AAClD,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAC5B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,eAA8D;AAC9D;AAAA,EACE;AAAA,EAGA;AAAA,EACA;AAAA,OACK;AAEP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,gBAA+D;AACxE,SAAS,gBAAgB,uBAAuB;AAChD,SAAS,aAAa,WAAW,eAAAA,oBAAmB;AACpD,SAAS,iBAAiB,eAAe,cAAAC,mBAAkB;AAC3D,SAAS,uBAAuB;AAChC,SAAS,eAAe;AAQjB,MAAM,UAAmC;AAAA,EAK9C,YAAY,MAAqB;AAJjC,qBAAY;AAKV,UAAM,EAAE,MAAM,UAAU,SAAS,IAAI;AACrC,SAAK,OAAO;AACZ,SAAK,WAAW,YAAY;AAC5B,SAAK,WAAW,YAAY;AAC5B,WAAO,iBAAiB,IAAI;AAAA,EAC9B;AACF;AAEO,MAAM,oBAAuD;AAAA,EAWlE,YAAY,OAA2D,CAAC,GAAG;AAV3E,qBAAY;AAWV,UAAM,EAAE,YAAY,eAAe,eAAe,KAAK,WAAW,QAAQ,QAAQ,IAAI,IAAI;AAC1F,SAAK,aAAa,cAAc,WAAW;AAC3C,QAAI,eAAe;AACjB,WAAK,gBAAgB,OAAO,qBAAqB,aAAa;AAAA,IAChE;AACA,QAAI,eAAe;AACjB,WAAK,gBAAgB,OAAO,qBAAqB,aAAa;AAAA,IAChE;AACA,SAAK,MAAM,OAAO;AAClB,SAAK,YAAY,aAAa;AAC9B,SAAK,SAAS,UAAU,YAAY;AACpC,SAAK,SAAS,UAAU;AACxB,SAAK,MAAM,OAAO;AAAA,EACpB;AACF;","names":["TrackSource","VideoCodec"]}