"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  AudioFrame: () => import_audio_frame.AudioFrame,
  AudioResampler: () => import_audio_resampler.AudioResampler,
  AudioResamplerQuality: () => import_audio_resampler.AudioResamplerQuality,
  AudioSource: () => import_audio_source.AudioSource,
  AudioStream: () => import_audio_stream.AudioStream,
  ConnectError: () => import_room.ConnectError,
  ConnectionQuality: () => import_room_pb2.ConnectionQuality,
  ConnectionState: () => import_room_pb2.ConnectionState,
  ContinualGatheringPolicy: () => import_room_pb2.ContinualGatheringPolicy,
  DataPacketKind: () => import_room_pb2.DataPacketKind,
  E2EEManager: () => import_e2ee.E2EEManager,
  EncryptionState: () => import_e2ee_pb.EncryptionState,
  EncryptionType: () => import_e2ee_pb.EncryptionType,
  FrameCryptor: () => import_e2ee.FrameCryptor,
  IceServer: () => IceServer,
  IceTransportType: () => import_room_pb2.IceTransportType,
  KeyProvider: () => import_e2ee.KeyProvider,
  LocalAudioTrack: () => import_track.LocalAudioTrack,
  LocalParticipant: () => import_participant.LocalParticipant,
  LocalTrackPublication: () => import_track_publication.LocalTrackPublication,
  LocalVideoTrack: () => import_track.LocalVideoTrack,
  Participant: () => import_participant.Participant,
  ParticipantKind: () => import_participant_pb.ParticipantKind,
  RemoteAudioTrack: () => import_track.RemoteAudioTrack,
  RemoteParticipant: () => import_participant.RemoteParticipant,
  RemoteTrackPublication: () => import_track_publication.RemoteTrackPublication,
  RemoteVideoTrack: () => import_track.RemoteVideoTrack,
  Room: () => import_room.Room,
  RoomEvent: () => import_room.RoomEvent,
  RpcError: () => import_rpc.RpcError,
  StreamState: () => import_track_pb2.StreamState,
  Track: () => import_track.Track,
  TrackKind: () => import_track_pb2.TrackKind,
  TrackPublication: () => import_track_publication.TrackPublication,
  TrackPublishOptions: () => TrackPublishOptions,
  TrackSource: () => import_track_pb2.TrackSource,
  VideoBufferType: () => import_video_frame_pb2.VideoBufferType,
  VideoCodec: () => import_video_frame_pb2.VideoCodec,
  VideoFrame: () => import_video_frame.VideoFrame,
  VideoRotation: () => import_video_frame_pb2.VideoRotation,
  VideoSource: () => import_video_source.VideoSource,
  VideoStream: () => import_video_stream.VideoStream,
  combineAudioFrames: () => import_audio_frame.combineAudioFrames,
  dispose: () => import_ffi_client.dispose
});
module.exports = __toCommonJS(src_exports);
var import_protobuf = require("@bufbuild/protobuf");
var import_room_pb = require("./proto/room_pb.cjs");
var import_track_pb = require("./proto/track_pb.cjs");
var import_video_frame_pb = require("./proto/video_frame_pb.cjs");
var import_room = require("./room.cjs");
var import_participant = require("./participant.cjs");
var import_track = require("./track.cjs");
var import_video_frame = require("./video_frame.cjs");
var import_audio_frame = require("./audio_frame.cjs");
var import_audio_stream = require("./audio_stream.cjs");
var import_audio_resampler = require("./audio_resampler.cjs");
var import_video_stream = require("./video_stream.cjs");
var import_audio_source = require("./audio_source.cjs");
var import_video_source = require("./video_source.cjs");
var import_track_publication = require("./track_publication.cjs");
var import_transcription = require("./transcription.cjs");
var import_e2ee = require("./e2ee.cjs");
var import_room_pb2 = require("./proto/room_pb.cjs");
var import_rpc = require("./rpc.cjs");
var import_e2ee_pb = require("./proto/e2ee_pb.cjs");
var import_track_pb2 = require("./proto/track_pb.cjs");
var import_video_frame_pb2 = require("./proto/video_frame_pb.cjs");
var import_participant_pb = require("./proto/participant_pb.cjs");
var import_ffi_client = require("./ffi_client.cjs");
class IceServer {
  constructor(init) {
    this.$typeName = "livekit.proto.IceServer";
    const { urls, username, password } = init;
    this.urls = urls;
    this.username = username ?? "";
    this.password = password ?? "";
    (0, import_protobuf.create)(import_room_pb.IceServerSchema, init);
  }
}
class TrackPublishOptions {
  constructor(init = {}) {
    this.$typeName = "livekit.proto.TrackPublishOptions";
    const { videoCodec, videoEncoding, audioEncoding, dtx, simulcast, source, stream, red } = init;
    this.videoCodec = videoCodec ?? import_video_frame_pb.VideoCodec.VP8;
    if (videoEncoding) {
      this.videoEncoding = (0, import_protobuf.create)(import_room_pb.VideoEncodingSchema, videoEncoding);
    }
    if (audioEncoding) {
      this.audioEncoding = (0, import_protobuf.create)(import_room_pb.AudioEncodingSchema, audioEncoding);
    }
    this.dtx = dtx ?? false;
    this.simulcast = simulcast ?? false;
    this.source = source ?? import_track_pb.TrackSource.SOURCE_UNKNOWN;
    this.stream = stream ?? "";
    this.red = red ?? false;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AudioFrame,
  AudioResampler,
  AudioResamplerQuality,
  AudioSource,
  AudioStream,
  ConnectError,
  ConnectionQuality,
  ConnectionState,
  ContinualGatheringPolicy,
  DataPacketKind,
  E2EEManager,
  EncryptionState,
  EncryptionType,
  FrameCryptor,
  IceServer,
  IceTransportType,
  KeyProvider,
  LocalAudioTrack,
  LocalParticipant,
  LocalTrackPublication,
  LocalVideoTrack,
  Participant,
  ParticipantKind,
  RemoteAudioTrack,
  RemoteParticipant,
  RemoteTrackPublication,
  RemoteVideoTrack,
  Room,
  RoomEvent,
  RpcError,
  StreamState,
  Track,
  TrackKind,
  TrackPublication,
  TrackPublishOptions,
  TrackSource,
  VideoBufferType,
  VideoCodec,
  VideoFrame,
  VideoRotation,
  VideoSource,
  VideoStream,
  combineAudioFrames,
  dispose
});
//# sourceMappingURL=index.cjs.map