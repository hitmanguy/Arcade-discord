{"version":3,"sources":["../src/participant.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { create } from '@bufbuild/protobuf';\nimport { FfiClient, FfiHandle } from './ffi_client.js';\nimport type { OwnedParticipant, ParticipantInfo, ParticipantKind } from './proto/participant_pb.js';\nimport type {\n  PublishDataCallback,\n  PublishDataResponse,\n  PublishSipDtmfCallback,\n  PublishSipDtmfResponse,\n  PublishTrackCallback,\n  PublishTrackResponse,\n  PublishTranscriptionCallback,\n  PublishTranscriptionResponse,\n  SendChatMessageCallback,\n  SendChatMessageResponse,\n  SetLocalAttributesCallback,\n  SetLocalAttributesResponse,\n  SetLocalMetadataCallback,\n  SetLocalMetadataResponse,\n  SetLocalNameCallback,\n  SetLocalNameResponse,\n  TrackPublishOptions,\n  UnpublishTrackCallback,\n  UnpublishTrackResponse,\n} from './proto/room_pb.js';\nimport {\n  ChatMessageSchema,\n  EditChatMessageRequestSchema,\n  PublishDataRequestSchema,\n  PublishSipDtmfRequestSchema,\n  PublishTrackRequestSchema,\n  PublishTranscriptionRequestSchema,\n  SendChatMessageRequestSchema,\n  SetLocalAttributesRequestSchema,\n  SetLocalMetadataRequestSchema,\n  SetLocalNameRequestSchema,\n  UnpublishTrackRequestSchema,\n} from './proto/room_pb.js';\nimport { TranscriptionSegmentSchema } from './proto/room_pb.js';\nimport {\n  PerformRpcRequestSchema,\n  RegisterRpcMethodRequestSchema,\n  RpcMethodInvocationResponseRequestSchema,\n  UnregisterRpcMethodRequestSchema,\n} from './proto/rpc_pb.js';\nimport type {\n  PerformRpcCallback,\n  PerformRpcResponse,\n  RegisterRpcMethodResponse,\n  RpcMethodInvocationResponseResponse,\n  UnregisterRpcMethodResponse,\n} from './proto/rpc_pb.js';\nimport { type PerformRpcParams, RpcError, type RpcInvocationData } from './rpc.js';\nimport type { LocalTrack } from './track.js';\nimport type { RemoteTrackPublication, TrackPublication } from './track_publication.js';\nimport { LocalTrackPublication } from './track_publication.js';\nimport type { Transcription } from './transcription.js';\nimport type { ChatMessage } from './types.js';\n\nexport abstract class Participant {\n  /** @internal */\n  info: ParticipantInfo;\n\n  /** @internal */\n  ffi_handle: FfiHandle;\n\n  trackPublications = new Map<string, TrackPublication>();\n\n  constructor(owned_info: OwnedParticipant) {\n    this.info = owned_info.info!;\n    this.ffi_handle = new FfiHandle(owned_info.handle!.id);\n  }\n\n  get sid(): string {\n    return this.info.sid;\n  }\n\n  get name(): string {\n    return this.info.name;\n  }\n\n  get identity(): string {\n    return this.info.identity;\n  }\n\n  get metadata(): string {\n    return this.info.metadata;\n  }\n\n  get attributes(): Record<string, string> {\n    return this.info.attributes;\n  }\n\n  get kind(): ParticipantKind {\n    return this.info.kind;\n  }\n}\n\nexport type DataPublishOptions = {\n  /**\n   * whether to send this as reliable or lossy.\n   * For data that you need delivery guarantee (such as chat messages), use Reliable.\n   * For data that should arrive as quickly as possible, but you are ok with dropped\n   * packets, use Lossy.\n   */\n  reliable?: boolean;\n  /**\n   * the identities of participants who will receive the message, will be sent to every one if empty\n   */\n  destination_identities?: string[];\n  /** the topic under which the message gets published */\n  topic?: string;\n};\n\nexport class LocalParticipant extends Participant {\n  private rpcHandlers: Map<string, (data: RpcInvocationData) => Promise<string>> = new Map();\n\n  trackPublications: Map<string, LocalTrackPublication> = new Map();\n\n  async publishData(data: Uint8Array, options: DataPublishOptions) {\n    const req = create(PublishDataRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      dataPtr: FfiClient.instance.retrievePtr(data),\n      dataLen: BigInt(data.byteLength),\n      reliable: options.reliable,\n      topic: options.topic,\n      destinationIdentities: options.destination_identities,\n    });\n\n    const res = FfiClient.instance.request<PublishDataResponse>({\n      message: { case: 'publishData', value: req },\n    });\n\n    const cb = await FfiClient.instance.waitFor<PublishDataCallback>((ev) => {\n      return ev.message.case == 'publishData' && ev.message.value.asyncId == res.asyncId;\n    });\n\n    if (cb.error) {\n      throw new Error(cb.error);\n    }\n  }\n\n  async publishDtmf(code: number, digit: string) {\n    const req = create(PublishSipDtmfRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      code,\n      digit,\n    });\n\n    const res = FfiClient.instance.request<PublishSipDtmfResponse>({\n      message: { case: 'publishSipDtmf', value: req },\n    });\n\n    const cb = await FfiClient.instance.waitFor<PublishSipDtmfCallback>((ev) => {\n      return ev.message.case == 'publishSipDtmf' && ev.message.value.asyncId == res.asyncId;\n    });\n\n    if (cb.error) {\n      throw new Error(cb.error);\n    }\n  }\n\n  async publishTranscription(transcription: Transcription) {\n    const req = create(PublishTranscriptionRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      participantIdentity: transcription.participantIdentity,\n      segments: transcription.segments.map((s) =>\n        create(TranscriptionSegmentSchema, {\n          id: s.id,\n          text: s.text,\n          startTime: s.startTime,\n          endTime: s.endTime,\n          final: s.final,\n          language: s.language,\n        }),\n      ),\n      trackId: transcription.trackSid,\n    });\n\n    const res = FfiClient.instance.request<PublishTranscriptionResponse>({\n      message: { case: 'publishTranscription', value: req },\n    });\n\n    const cb = await FfiClient.instance.waitFor<PublishTranscriptionCallback>((ev) => {\n      return ev.message.case == 'publishTranscription' && ev.message.value.asyncId == res.asyncId;\n    });\n\n    if (cb.error) {\n      throw new Error(cb.error);\n    }\n  }\n\n  async updateMetadata(metadata: string) {\n    const req = create(SetLocalMetadataRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      metadata: metadata,\n    });\n\n    const res = FfiClient.instance.request<SetLocalMetadataResponse>({\n      message: { case: 'setLocalMetadata', value: req },\n    });\n\n    await FfiClient.instance.waitFor<SetLocalMetadataCallback>((ev) => {\n      return ev.message.case == 'setLocalMetadata' && ev.message.value.asyncId == res.asyncId;\n    });\n  }\n\n  /**\n   * Sends a chat message to participants in the room\n   *\n   * @param text - The text content of the chat message.\n   * @param destinationIdentities - An optional array of recipient identities to whom the message will be sent. If omitted, the message is broadcast to all participants.\n   * @param senderIdentity - An optional identity of the sender. If omitted, the default sender identity is used.\n   *\n   */\n  async sendChatMessage(\n    text: string,\n    destinationIdentities?: Array<string>,\n    senderIdentity?: string,\n  ): Promise<ChatMessage> {\n    const req = create(SendChatMessageRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      message: text,\n      destinationIdentities,\n      senderIdentity,\n    });\n\n    const res = FfiClient.instance.request<SendChatMessageResponse>({\n      message: { case: 'sendChatMessage', value: req },\n    });\n\n    const cb = await FfiClient.instance.waitFor<SendChatMessageCallback>((ev) => {\n      return ev.message.case == 'chatMessage' && ev.message.value.asyncId == res.asyncId;\n    });\n\n    if (cb.message.case !== 'chatMessage') {\n      throw new Error(cb.message.value ?? 'Unknown Error');\n    }\n    const { id, timestamp, editTimestamp, message } = cb.message.value;\n    return { id, timestamp: Number(timestamp), editTimestamp: Number(editTimestamp), message };\n  }\n\n  /**\n   * @experimental\n   */\n  async editChatMessage(\n    editText: string,\n    originalMessage: ChatMessage,\n    destinationIdentities?: Array<string>,\n    senderIdentity?: string,\n  ): Promise<ChatMessage> {\n    const req = create(EditChatMessageRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      editText,\n      originalMessage: create(ChatMessageSchema, {\n        ...originalMessage,\n        timestamp: BigInt(originalMessage.timestamp),\n        editTimestamp: originalMessage.editTimestamp\n          ? BigInt(originalMessage.editTimestamp)\n          : undefined,\n      }),\n      destinationIdentities,\n      senderIdentity,\n    });\n\n    const res = FfiClient.instance.request<SendChatMessageResponse>({\n      message: { case: 'editChatMessage', value: req },\n    });\n\n    const cb = await FfiClient.instance.waitFor<SendChatMessageCallback>((ev) => {\n      return ev.message.case == 'chatMessage' && ev.message.value.asyncId == res.asyncId;\n    });\n\n    if (cb.message.case !== 'chatMessage') {\n      throw new Error(cb.message.value ?? 'Unknown Error');\n    }\n    const { id, timestamp, editTimestamp, message } = cb.message.value;\n    return { id, timestamp: Number(timestamp), editTimestamp: Number(editTimestamp), message };\n  }\n\n  async updateName(name: string) {\n    const req = create(SetLocalNameRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      name: name,\n    });\n\n    const res = FfiClient.instance.request<SetLocalNameResponse>({\n      message: { case: 'setLocalName', value: req },\n    });\n\n    await FfiClient.instance.waitFor<SetLocalNameCallback>((ev) => {\n      return ev.message.case == 'setLocalName' && ev.message.value.asyncId == res.asyncId;\n    });\n  }\n\n  async setAttributes(attributes: Record<string, string>) {\n    const req = create(SetLocalAttributesRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      attributes: Array.from(Object.entries(attributes)).map(([key, value]) => {\n        return { key, value };\n      }),\n    });\n\n    const res = FfiClient.instance.request<SetLocalAttributesResponse>({\n      message: { case: 'setLocalAttributes', value: req },\n    });\n\n    await FfiClient.instance.waitFor<SetLocalAttributesCallback>((ev) => {\n      return ev.message.case == 'setLocalAttributes' && ev.message.value.asyncId == res.asyncId;\n    });\n  }\n\n  async publishTrack(\n    track: LocalTrack,\n    options: TrackPublishOptions,\n  ): Promise<LocalTrackPublication> {\n    const req = create(PublishTrackRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      trackHandle: track.ffi_handle.handle,\n      options: options,\n    });\n\n    const res = FfiClient.instance.request<PublishTrackResponse>({\n      message: { case: 'publishTrack', value: req },\n    });\n\n    const cb = await FfiClient.instance.waitFor<PublishTrackCallback>((ev) => {\n      return ev.message.case == 'publishTrack' && ev.message.value.asyncId == res.asyncId;\n    });\n\n    if (cb.message.case !== 'publication') {\n      throw new Error(cb.message.value ?? 'Unknown Error');\n    }\n\n    const track_publication = new LocalTrackPublication(cb.message.value!);\n    track_publication.track = track;\n    this.trackPublications.set(track_publication.sid, track_publication);\n\n    return track_publication;\n  }\n\n  async unpublishTrack(trackSid: string) {\n    const req = create(UnpublishTrackRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      trackSid: trackSid,\n    });\n\n    const res = FfiClient.instance.request<UnpublishTrackResponse>({\n      message: { case: 'unpublishTrack', value: req },\n    });\n\n    const cb = await FfiClient.instance.waitFor<UnpublishTrackCallback>((ev) => {\n      return ev.message.case == 'unpublishTrack' && ev.message.value.asyncId == res.asyncId;\n    });\n\n    if (cb.error) {\n      throw new Error(cb.error);\n    }\n\n    const pub = this.trackPublications.get(trackSid);\n    if (pub) {\n      pub.track = undefined;\n    }\n    this.trackPublications.delete(trackSid);\n  }\n\n  /**\n   * Initiate an RPC call to a remote participant.\n   * @param params - Parameters for initiating the RPC call, see {@link PerformRpcParams}\n   * @returns A promise that resolves with the response payload or rejects with an error.\n   * @throws Error on failure. Details in `message`.\n   */\n  async performRpc({\n    destinationIdentity,\n    method,\n    payload,\n    responseTimeout,\n  }: PerformRpcParams): Promise<string> {\n    const req = create(PerformRpcRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      destinationIdentity,\n      method,\n      payload,\n      responseTimeoutMs: responseTimeout,\n    });\n\n    const res = FfiClient.instance.request<PerformRpcResponse>({\n      message: { case: 'performRpc', value: req },\n    });\n\n    const cb = await FfiClient.instance.waitFor<PerformRpcCallback>((ev) => {\n      return ev.message.case === 'performRpc' && ev.message.value.asyncId === res.asyncId;\n    });\n\n    if (cb.error) {\n      throw RpcError.fromProto(cb.error);\n    }\n\n    return cb.payload;\n  }\n\n  /**\n   * Establishes the participant as a receiver for calls of the specified RPC method.\n   * Will overwrite any existing callback for the same method.\n   *\n   * @param method - The name of the indicated RPC method\n   * @param handler - Will be invoked when an RPC request for this method is received\n   * @returns A promise that resolves when the method is successfully registered\n   *\n   * @example\n   * ```typescript\n   * room.localParticipant?.registerRpcMethod(\n   *   'greet',\n   *   async (data: RpcInvocationData) => {\n   *     console.log(`Received greeting from ${data.callerIdentity}: ${data.payload}`);\n   *     return `Hello, ${data.callerIdentity}!`;\n   *   }\n   * );\n   * ```\n   *\n   * See {@link RpcInvocationData} for more details on invocation params.\n   *\n   * The handler should return a Promise that resolves to a string.\n   * If unable to respond within `responseTimeout`, the request will result in an error on the caller's side.\n   *\n   * You may throw errors of type `RpcError` with a string `message` in the handler,\n   * and they will be received on the caller's side with the message intact.\n   * Other errors thrown in your handler will not be transmitted as-is, and will instead arrive to the caller as `1500` (\"Application Error\").\n   */\n  registerRpcMethod(method: string, handler: (data: RpcInvocationData) => Promise<string>) {\n    this.rpcHandlers.set(method, handler);\n\n    const req = create(RegisterRpcMethodRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      method,\n    });\n\n    FfiClient.instance.request<RegisterRpcMethodResponse>({\n      message: { case: 'registerRpcMethod', value: req },\n    });\n  }\n\n  /**\n   * Unregisters a previously registered RPC method.\n   *\n   * @param method - The name of the RPC method to unregister\n   */\n  unregisterRpcMethod(method: string) {\n    this.rpcHandlers.delete(method);\n\n    const req = create(UnregisterRpcMethodRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      method,\n    });\n\n    FfiClient.instance.request<UnregisterRpcMethodResponse>({\n      message: { case: 'unregisterRpcMethod', value: req },\n    });\n  }\n\n  /** @internal */\n  async handleRpcMethodInvocation(\n    invocationId: bigint,\n    method: string,\n    requestId: string,\n    callerIdentity: string,\n    payload: string,\n    responseTimeout: number,\n  ) {\n    let responseError: RpcError | null = null;\n    let responsePayload: string | null = null;\n\n    const handler = this.rpcHandlers.get(method);\n\n    if (!handler) {\n      responseError = RpcError.builtIn('UNSUPPORTED_METHOD');\n    } else {\n      try {\n        responsePayload = await handler({ requestId, callerIdentity, payload, responseTimeout });\n      } catch (error) {\n        if (error instanceof RpcError) {\n          responseError = error;\n        } else {\n          console.warn(\n            `Uncaught error returned by RPC handler for ${method}. Returning APPLICATION_ERROR instead.`,\n            error,\n          );\n          responseError = RpcError.builtIn('APPLICATION_ERROR');\n        }\n      }\n    }\n\n    const req = create(RpcMethodInvocationResponseRequestSchema, {\n      localParticipantHandle: this.ffi_handle.handle,\n      invocationId,\n      error: responseError ? responseError.toProto() : undefined,\n      payload: responsePayload ?? undefined,\n    });\n\n    const res = FfiClient.instance.request<RpcMethodInvocationResponseResponse>({\n      message: { case: 'rpcMethodInvocationResponse', value: req },\n    });\n\n    if (res.error) {\n      console.warn(`error sending rpc method invocation response: ${res.error}`);\n    }\n  }\n}\n\nexport class RemoteParticipant extends Participant {\n  trackPublications: Map<string, RemoteTrackPublication> = new Map();\n\n  constructor(owned_info: OwnedParticipant) {\n    super(owned_info);\n  }\n}\n"],"mappings":"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","names":["import_room_pb"]}