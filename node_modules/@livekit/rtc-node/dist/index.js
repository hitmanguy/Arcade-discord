import { create } from "@bufbuild/protobuf";
import {
  AudioEncodingSchema,
  IceServerSchema,
  VideoEncodingSchema
} from "./proto/room_pb.js";
import { TrackSource } from "./proto/track_pb.js";
import { VideoCodec } from "./proto/video_frame_pb.js";
import { Room, RoomEvent, ConnectError } from "./room.js";
import { Participant, RemoteParticipant, LocalParticipant } from "./participant.js";
import {
  Track,
  LocalAudioTrack,
  LocalVideoTrack,
  RemoteAudioTrack,
  RemoteVideoTrack
} from "./track.js";
import { VideoFrame } from "./video_frame.js";
import { AudioFrame, combineAudioFrames } from "./audio_frame.js";
import { AudioStream } from "./audio_stream.js";
import { AudioResampler, AudioResamplerQuality } from "./audio_resampler.js";
import { VideoStream } from "./video_stream.js";
import { AudioSource } from "./audio_source.js";
import { VideoSource } from "./video_source.js";
import {
  TrackPublication,
  RemoteTrackPublication,
  LocalTrackPublication
} from "./track_publication.js";
import {} from "./transcription.js";
import {
  E2EEManager,
  KeyProvider,
  FrameCryptor
} from "./e2ee.js";
import {
  ConnectionQuality,
  IceTransportType,
  DataPacketKind,
  ContinualGatheringPolicy,
  ConnectionState
} from "./proto/room_pb.js";
import { RpcError } from "./rpc.js";
import { EncryptionType, EncryptionState } from "./proto/e2ee_pb.js";
import { StreamState, TrackKind, TrackSource as TrackSource2 } from "./proto/track_pb.js";
import { VideoBufferType, VideoRotation, VideoCodec as VideoCodec2 } from "./proto/video_frame_pb.js";
import { ParticipantKind } from "./proto/participant_pb.js";
import { dispose } from "./ffi_client.js";
class IceServer {
  constructor(init) {
    this.$typeName = "livekit.proto.IceServer";
    const { urls, username, password } = init;
    this.urls = urls;
    this.username = username ?? "";
    this.password = password ?? "";
    create(IceServerSchema, init);
  }
}
class TrackPublishOptions {
  constructor(init = {}) {
    this.$typeName = "livekit.proto.TrackPublishOptions";
    const { videoCodec, videoEncoding, audioEncoding, dtx, simulcast, source, stream, red } = init;
    this.videoCodec = videoCodec ?? VideoCodec.VP8;
    if (videoEncoding) {
      this.videoEncoding = create(VideoEncodingSchema, videoEncoding);
    }
    if (audioEncoding) {
      this.audioEncoding = create(AudioEncodingSchema, audioEncoding);
    }
    this.dtx = dtx ?? false;
    this.simulcast = simulcast ?? false;
    this.source = source ?? TrackSource.SOURCE_UNKNOWN;
    this.stream = stream ?? "";
    this.red = red ?? false;
  }
}
export {
  AudioFrame,
  AudioResampler,
  AudioResamplerQuality,
  AudioSource,
  AudioStream,
  ConnectError,
  ConnectionQuality,
  ConnectionState,
  ContinualGatheringPolicy,
  DataPacketKind,
  E2EEManager,
  EncryptionState,
  EncryptionType,
  FrameCryptor,
  IceServer,
  IceTransportType,
  KeyProvider,
  LocalAudioTrack,
  LocalParticipant,
  LocalTrackPublication,
  LocalVideoTrack,
  Participant,
  ParticipantKind,
  RemoteAudioTrack,
  RemoteParticipant,
  RemoteTrackPublication,
  RemoteVideoTrack,
  Room,
  RoomEvent,
  RpcError,
  StreamState,
  Track,
  TrackKind,
  TrackPublication,
  TrackPublishOptions,
  TrackSource2 as TrackSource,
  VideoBufferType,
  VideoCodec2 as VideoCodec,
  VideoFrame,
  VideoRotation,
  VideoSource,
  VideoStream,
  combineAudioFrames,
  dispose
};
//# sourceMappingURL=index.js.map